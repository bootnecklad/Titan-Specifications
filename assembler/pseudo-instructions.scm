;;; definitions for pseudo instructions for Titan

(define (desguar-pseudo-instruction instr)
  (case (car instr)
    (($SHL) (list (list 'ADD (cadr instr) (cadr instr))))
    (($TST) (list (list 'XOR (cadr instr) (cadr instr))))
    (($JNZ) (list (list 'JPZ (string->symbol (string-append "JMP-" (number->string (counter)))))
		  (list 'JMP (cadr instr))
		  (list '.LABEL (string->symbol (string-append "JMP-" (number->string (- (counter) 1)))))))
    (($JNS) (list (list 'JPS (string->symbol (string-append "JMP-" (number->string (counter)))))
		  (list 'JMP (cadr instr))
		  (list '.LABEL (string->symbol (string-append "JMP-" (number->string (- (counter) 1)))))))
    (($JNC) (list (list 'JPC (string->symbol (string-append "JMP-" (number->string (counter)))))
		  (list 'JMP (cadr instr))
		  (list '.LABEL (string->symbol (string-append "JMP-" (number->string (- (counter) 1)))))))
    (($CMP) (list (list 'PSH (caddr instr))
		  (list 'SUB (cadr instr) (caddr instr))
		  (list 'POP (caddr instr))))
    (($JPE) (list (list 'JPZ (cadr instr))))
    (($JPG) (list (list 'JPS (string->symbol (string-append "JMP-" (number->string (counter)))))
		  (list 'JMP (cadr instr))
		  (list '.LABEL (string->symbol (string-append "JMP-" (number->string (- (counter) 1)))))))
    (($JPL) (list (list 'JPS (cadr instr))))
    (($TRA) (list (list 'PSH 'R0) ; ($TRA #xSRC #xDST) transfer element at #xSRC to #xDST
		  (list 'LDM 'R0 (cadr instr))
		  (list 'STM 'R0 (caddr instr))
		  (list 'POP 'R0)))
    (($BTR) (list (list 'PSH 'R0) ; Block transfer of bytes ($BTR #xZZ #xSRC #xDST)
		  (list 'PSH 'R1) ; Transfers #xZZ number of bytes from address #xSRC #xDST
		  (list 'PSH 'R2)
		  (list 'LDC 'R1 (cadr instr))
		  (list '.LABEL (string->symbol (string-append "BTR-LOOP-" (number->string (counter)))))
		  (list 'XOR 'R1 'R1)
		  (list 'JPZ (string->symbol (string-append "BTR-END-" (number->string (counter)))))
		  (list 'LDM 'R0 'R2 (caddr instr))
		  (list 'STM 'R0 'R2 (cadddr instr))
		  (list 'INC 'R2)
		  (list 'DEC 'R1)
		  (list 'JMP (string->symbol (string-append "BTR-LOOP-" (number->string (- (counter) 2)))))
		  (list '.LABEL (string->symbol (string-append "BTR-END-" (number->string (- (counter) 2)))))
		  (list 'POP 'R2)
		  (list 'POP 'R1)
		  (list 'POP 'R0)))
    (($PSA) (list (list 'PSR 'R0) ; Push all registers onto return stack
		  (list 'PSR 'R1) ; Apart from PC + RP, otherwise Bad Things
		  (list 'PSR 'R2)
		  (list 'PSR 'R3)
		  (list 'PSR 'R4)
		  (list 'PSR 'R5)
		  (list 'PSR 'R6)
		  (list 'PSR 'R7)
		  (list 'PSR 'R8)
		  (list 'PSR 'R9)
		  (list 'PSR 'RA)
		  (list 'PSR 'RB)
		  (list 'PSR 'RC)
		  (list 'PSR 'RD)))
    (($POA) (list (list 'POR 'RD) ; Pop all registers from return stack
		  (list 'POR 'RC) ; Apart from PC + RP, otherwise Bad Things
		  (list 'POR 'RB)
		  (list 'POR 'RA)
		  (list 'POR 'R9)
		  (list 'POR 'R8)
		  (list 'POR 'R7)
		  (list 'POR 'R6)
		  (list 'POR 'R5)
		  (list 'POR 'R4)
		  (list 'POR 'R3)
		  (list 'POR 'R2)
		  (list 'POR 'R1)
		  (list 'POR 'R0)))
    (else (list instr))))


;; Bad joojoo



(define jmp-counter 0)

(define (counter)
  (begin (set! jmp-counter (add1 jmp-counter))
	 jmp-counter))
